{"version":3,"sources":["webpack:///./index.js"],"names":["timer","selector","targetDate","this","ref","CountdownTimer","getControl","intervalId","calculate","currentTime","Date","now","deltaTime","daysAmount","days","hoursAmount","hours","minsAmount","mins","secsAmount","secs","daysElement","innerHTML","hoursElement","minsElement","secsElement","start","setInterval","document","querySelector","time","Math","floor"],"mappings":"gFAiEMA,EAAQ,I,WA/DZ,cAAkC,IAArBC,EAAqB,EAArBA,SAASC,EAAY,EAAZA,WACpBC,KAAKF,SAAWA,EAChBE,KAAKD,WAAaA,EAClBC,KAAKC,IAAMC,EAAeC,aAC1BH,KAAKI,WAAa,K,2BAGnBC,UAAA,WACC,IAAMC,EAAcC,KAAKC,MACnBC,EAAYZ,EAAME,WAAaO,EAC/BI,EAAaR,EAAeS,KAAKF,GACjCG,EAAcV,EAAeW,MAAMJ,GACnCK,EAAYZ,EAAea,KAAKN,GAChCO,EAAad,EAAee,KAAKR,GACvCT,KAAKC,IAAIiB,YAAYC,UAAYT,EACjCV,KAAKC,IAAImB,aAAaD,UAAYP,EAClCZ,KAAKC,IAAIoB,YAAYF,UAAYL,EACjCd,KAAKC,IAAIqB,YAAYH,UAAYH,G,EAGnCO,MAAA,WAAQ,WACNnB,WAAaoB,aAAY,kBAAM,EAAKnB,cAAa,M,EAG5CF,WAAP,WACE,MAAO,CACLe,YAAcO,SAASC,cAAc,uBACrCN,aAAeK,SAASC,cAAc,wBACtCL,YAAcI,SAASC,cAAc,uBACrCJ,YAAcG,SAASC,cAAc,yB,EAOnCf,KAAP,SAAYgB,GACV,OAAOC,KAAKC,MAAMF,EAAO,Q,EAQrBd,MAAP,SAAac,GACV,OAAOC,KAAKC,MAAOF,EAAO,MAAR,O,EAMdZ,KAAP,SAAYY,GACT,OAAOC,KAAKC,MAAOF,EAAO,KAAR,M,EAMdV,KAAP,SAAYU,GACT,OAAOC,KAAKC,MAAOF,EAAO,IAAe,M,KAG9B,CAAmB,CAC/B7B,SAAU,WACVC,WAAY,IAAIQ,KAAK,kBAGtBV,EAAM0B,U","file":"main.94d1a3db55c81bd8fab9.js","sourcesContent":[" \r\nclass CountdownTimer {\r\n  constructor({selector,targetDate}){\r\n    this.selector = selector;\r\n    this.targetDate = targetDate; \r\n    this.ref = CountdownTimer.getControl();\r\n    this.intervalId = null;\r\n  }\r\n\r\n   calculate(){\r\n    const currentTime = Date.now();\r\n    const deltaTime = timer.targetDate - currentTime;\r\n    const daysAmount = CountdownTimer.days(deltaTime);\r\n    const hoursAmount = CountdownTimer.hours(deltaTime);\r\n    const minsAmount =CountdownTimer.mins(deltaTime);\r\n    const secsAmount = CountdownTimer.secs(deltaTime);\r\n    this.ref.daysElement.innerHTML = daysAmount;\r\n    this.ref.hoursElement.innerHTML = hoursAmount;\r\n    this.ref.minsElement.innerHTML = minsAmount;\r\n    this.ref.secsElement.innerHTML = secsAmount;\r\n  }\r\n\r\n  start() {\r\n    intervalId = setInterval(() => this.calculate(), 1000);\r\n  }\r\n  \r\n  static getControl(){\r\n    return {\r\n      daysElement : document.querySelector('[data-value=\"days\"]'),\r\n      hoursElement : document.querySelector('[data-value=\"hours\"]'),\r\n      minsElement : document.querySelector('[data-value=\"mins\"]'),\r\n      secsElement : document.querySelector('[data-value=\"secs\"]'),\r\n    }\r\n  }\r\n/*\r\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n */\r\n static days(time) {\r\n   return Math.floor(time / (1000 * 60 * 60 * 24))\r\n  }; \r\n\r\n/*\r\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n * остатка % и делим его на количество миллисекунд в одном часе\r\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n */\r\nstatic hours(time) { \r\n   return Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))};\r\n\r\n/*\r\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n */\r\nstatic mins(time) { \r\n   return Math.floor((time % (1000 * 60 * 60)) / (1000 * 60))};\r\n\r\n/*\r\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n * миллисекунд в одной секунде (1000)\r\n */\r\nstatic secs(time) { \r\n   return Math.floor((time % (1000 * 60)) / 1000)};\r\n};\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jul 17, 2021'),\r\n\r\n});\r\n timer.start();\r\n "],"sourceRoot":""}